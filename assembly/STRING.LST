     1                                  ; comparing null terminated strings
     2                                  [org 0x0100]
     3 00000000 E96700                  jmp start
     4 00000003 436F616C204C616200      msg1: db 'Coal Lab', 0
     5 0000000C 436F616C204C616200      msg2: db 'Coal Lab', 0
     6 00000015 5046204C616200          msg3: db 'PF Lab', 0
     7                                  ; takes segment and offset pairs of two strings to compare
     8                                  ; returns 1 in ax if they match and 0 other wise
     9                                  ;to compare two strings
    10                                  ; subroutine to calculate the length of a string
    11                                  ; takes the segment and offset of a string as parameters
    12 0000001C 55                      strlen: push bp
    13 0000001D 89E5                    mov bp,sp
    14 0000001F 06                      push es
    15 00000020 51                      push cx
    16 00000021 57                      push di
    17 00000022 C47E04                  les di, [bp+4] ; point es:di to string
    18 00000025 B9FFFF                  mov cx, 0xffff ; load maximum number in cx
    19 00000028 30C0                    xor al, al ; load a zero in al
    20 0000002A F2AE                    repne scasb ; find zero in the string
    21 0000002C B8FFFF                  mov ax, 0xffff ; load maximum number in ax
    22 0000002F 29C8                    sub ax, cx ; find change in cx
    23 00000031 48                      dec ax ; exclude null from length
    24 00000032 5F                      pop di
    25 00000033 59                      pop cx
    26 00000034 07                      pop es
    27 00000035 5D                      pop bp
    28 00000036 C20400                  ret 4
    29                                  strcmp:
    30 00000039 55                      push bp
    31 0000003A 89E5                    mov bp,sp
    32 0000003C 51                      push cx
    33 0000003D 56                      push si
    34 0000003E 57                      push di
    35 0000003F 06                      push es
    36 00000040 1E                      push ds
    37 00000041 C57604                  lds si, [bp+4] ; point ds:si to first string
    38 00000044 C47E08                  les di, [bp+8] ; point es:di to second string
    39 00000047 1E                      push ds ; push segment of first string
    40 00000048 56                      push si ; push offset of first string
    41 00000049 E8D0FF                  call strlen ; calculate string length
    42 0000004C 89C1                    mov cx, ax ; save length in cx
    43 0000004E 06                      push es ; push segment of second string
    44 0000004F 57                      push di ; push offset of second string
    45 00000050 E8C9FF                  call strlen ; calculate string lenth
    46 00000053 39C1                    cmp cx, ax ; compare length of both strings
    47 00000055 7507                    jne exitfalse ; return 0 if they are unequal
    48 00000057 B80100                  mov ax, 1 ; store 1 in ax to be returned
    49 0000005A F3A6                    repe cmpsb ; compare both strings
    50 0000005C E303                    jcxz exitsimple ; are they successfully compared
    51 0000005E B80000                  exitfalse: mov ax, 0 ; store 0 to mark unequal
    52 00000061 1F                      exitsimple: pop ds
    53 00000062 07                      pop es
    54 00000063 5F                      pop di
    55 00000064 5E                      pop si
    56 00000065 59                      pop cx
    57 00000066 5D                      pop bp
    58 00000067 C20800                  ret 8
    59 0000006A 1E                      start: push ds ; push segment of first string
    60 0000006B B8[0300]                mov ax, msg1
    61 0000006E 50                      push ax ; push offset of first string
    62 0000006F 1E                      push ds ; push segment of second string
    63 00000070 B8[0C00]                mov ax, msg2
    64 00000073 50                      push ax ; push offset of second string
    65 00000074 E8C2FF                  call strcmp ; call strcmp subroutine
    66 00000077 1E                      push ds ; push segment of first string
    67 00000078 B8[0300]                mov ax, msg1
    68 0000007B 50                      push ax ; push offset of first string
    69 0000007C 1E                      push ds ; push segment of third string
    70 0000007D B8[1500]                mov ax, msg3
    71 00000080 50                      push ax ; push offset of third string
    72 00000081 E8B5FF                  call strcmp ; call strcmp subroutine
    73 00000084 B8004C                  mov ax, 0x4c00 ; terminate program
    74 00000087 CD21                    int 0x21
